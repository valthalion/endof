"""
Read the logfiles generated by running ENDOF (Endof New Distributed Optimization
Framework) and store the information in a MySQL database.

This assumes that there is an 'endof' database available with the suitable
schema: a <pre>_instances and a <pre>_iters table for each type of test,
where <pre> stands for the type: ga, aco.

The instances table contains the information global to each run: which problem
instance it used, the running times, whether multiverse was used or not, etc. The
iterations table contains the best solution found at each iteration for each
run (experiment).

The fields in the tables are:
- <pre>_instances:
  - instance_id: (string) name of the problem used - the filename
  - run_num: (int) number of the run
  - is_multiverse: (int/bool) 0 if not using multiverse, > 0 otherwise
  - num_nodes: (int) number of nodes in the cluster where it was run
  - num_cities: (int) number of items in the problem
  - runtime_user: (float) user runtime elapsed in seconds
  - runtime_system: (float) kernel runtime elapsed in seconds
  - runtime_wall: (float) real runtime elapsed in seconds
  - random_seed: (float) random seed used - stored for repeatability
  - best_sol_end: (float) best solution found in the run

- <pre>_iters
  - instance_id: (string) name of the problem used - the filename
  - run_num: (int) number of the run
  - is_multiverse: (int/bool) 0 if not using multiverse, > 0 otherwise
  - iter_num: (int) number of the iteration
  - best_sol: (float) best solution found at the iteration

This also assumes that the user and password for the database is endof

This file is distributed under the MIT license (http://opensource.org/licenses/MIT)
"""

import re
import os
import MySQLdb


db = MySQLdb.connect(host="localhost", user="endof", passwd="endof", db="endof")
cur = db.cursor()


def translate(filename):
    """
    Generate an experiment dictionary from the log filename
    """
    parts = filename.split('_')
    experiment = {'instance_id': parts[0],
                  'num_nodes': int(parts[1]),
                  'experiment_type': parts[2],
                  'instances_table': parts[2] + '_instances',
                  'iters_table': parts[2] + '_iters',
                  'is_multiverse': 1 if parts[3] == "multiverse" else 0,
                  'run_num': int(parts[4].split('.')[0])}
    return experiment


def get_times(line):
    m = re.search('''^(.+)user (.+)system (.+)elapsed''', line)
    runtime_user = float(m.group(1))
    runtime_system = float(m.group(2))
    wall_time = m.group(3).split(':')
    runtime_wall = 60 * float(wall_time[0]) + float(wall_time[1])
    return runtime_user, runtime_system, runtime_wall


def iters_from_name(name):
    m = re.search('''\d{2,}''', name)
    num = int(m.group(0))
    return num


def get_iter_data(iter_line):
    m = re.search('''^iteration: (.+); best sol: (.+)$''', iter_line)
    if not m:
      print(iter_line)
      return None
    iter_num = int(m.group(1))
    iter_best_sol = float(m.group(2))
    return iter_num, iter_best_sol


logfiles = os.listdir("data")
for filename in logfiles:
    experiment = translate(filename)

    with open("data/" + filename, 'r') as f:
        lines = [line for line in f]
    iters_lines = lines[:-4]
    random_seed_line = lines[-3]
    time_line = lines[-2]
    random_seed = float(random_seed_line.split()[2])
    runtime_user, runtime_system, runtime_wall = get_times(time_line)
    experiment['runtime_user'] = runtime_user
    experiment['runtime_system'] = runtime_system
    experiment['runtime_wall'] = runtime_wall
    experiment['random_seed'] = random_seed
    experiment['num_cities'] = iters_from_name(experiment['instance_id'])

    iters = list(map(get_iter_data, iters_lines))
    experiment['best_sol_end'] = iters[-1][1]

    q = "INSERT INTO {instances_table} " \
        "(instance_id,run_num,is_multiverse,num_nodes," \
        "num_cities,runtime_user,runtime_system,runtime_wall," \
        "random_seed,best_sol_end) " \
        "VALUES ('{instance_id}',{run_num},{is_multiverse},{num_nodes}," \
        "{num_cities},{runtime_user},{runtime_system},{runtime_wall},"\
        "{random_seed},{best_sol_end})".format(**experiment)
    try:
        cur.execute(q)
    except Exception as e:
        print(q)
        print(e)
        cur.close()
        db.close()
        exit()

    last_iter = 0
    for it in iters:
        if it is None:
            print(filename)
        if it[0] == last_iter:
            continue
        last_iter = it[0]
        experiment['iter_num'] = it[0]
        experiment['best_sol'] = it[1]
        q = "INSERT INTO {iters_table} " \
            "(instance_id,run_num,is_multiverse,iter_num,best_sol) " \
            "VALUES ('{instance_id}',{run_num},{is_multiverse}," \
            "{iter_num},{best_sol})".format(**experiment)
        try:
            cur.execute(q)
        except Exception as e:
            print(q)
            print(e)
            cur.close()
            db.close()
            exit()

db.commit()
cur.close()
db.close()
